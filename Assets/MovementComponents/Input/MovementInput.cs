//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/MovementComponents/Input/MovementInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MovementInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MovementInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MovementInput"",
    ""maps"": [
        {
            ""name"": ""PhysicsBasedScroll2D"",
            ""id"": ""7b74d1bc-e7e5-4ea8-b135-5086251146db"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""aeb4a27e-0e89-49bb-954b-ab455b8a6453"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""2f18bb73-07d8-4a96-81a3-3dd5866b2e33"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""30913a80-80f3-470b-93e7-ed4d1e5aed7f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""e2e42691-1f06-41b0-8749-683f06b1978a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f1922db8-72aa-41eb-bdd2-33aac3374545"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MovementControlScheme"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""01374ff0-25fd-4ec4-8f3b-490e330d5c2e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MovementControlScheme"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""829f3270-3f5c-45ff-ad80-7fde0ee1ee07"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MovementControlScheme"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ef142dd6-fa4b-46f3-a6ba-b5749ddf02f5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MovementControlScheme"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""8f099604-f085-4db8-8937-1065029fc9dd"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b73c5e3e-ec17-45a7-ade4-a279eb0b54f3"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MovementControlScheme"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9841165b-1085-4e3c-a70f-2e2381ec6152"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MovementControlScheme"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6e61dd9f-d688-456a-8ad2-b46bce7072a7"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MovementControlScheme"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""aa83cb72-d411-4b55-bb01-8d55fc0895bf"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MovementControlScheme"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""cee99cf5-9e36-47f4-9617-57a001d737fb"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MovementControlScheme"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""95dd9ded-2ce9-4906-9417-ab11614e0425"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""MovementControlScheme"",
            ""bindingGroup"": ""MovementControlScheme"",
            ""devices"": []
        }
    ]
}");
        // PhysicsBasedScroll2D
        m_PhysicsBasedScroll2D = asset.FindActionMap("PhysicsBasedScroll2D", throwIfNotFound: true);
        m_PhysicsBasedScroll2D_Movement = m_PhysicsBasedScroll2D.FindAction("Movement", throwIfNotFound: true);
        m_PhysicsBasedScroll2D_Jump = m_PhysicsBasedScroll2D.FindAction("Jump", throwIfNotFound: true);
        m_PhysicsBasedScroll2D_Run = m_PhysicsBasedScroll2D.FindAction("Run", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PhysicsBasedScroll2D
    private readonly InputActionMap m_PhysicsBasedScroll2D;
    private IPhysicsBasedScroll2DActions m_PhysicsBasedScroll2DActionsCallbackInterface;
    private readonly InputAction m_PhysicsBasedScroll2D_Movement;
    private readonly InputAction m_PhysicsBasedScroll2D_Jump;
    private readonly InputAction m_PhysicsBasedScroll2D_Run;
    public struct PhysicsBasedScroll2DActions
    {
        private @MovementInput m_Wrapper;
        public PhysicsBasedScroll2DActions(@MovementInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PhysicsBasedScroll2D_Movement;
        public InputAction @Jump => m_Wrapper.m_PhysicsBasedScroll2D_Jump;
        public InputAction @Run => m_Wrapper.m_PhysicsBasedScroll2D_Run;
        public InputActionMap Get() { return m_Wrapper.m_PhysicsBasedScroll2D; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PhysicsBasedScroll2DActions set) { return set.Get(); }
        public void SetCallbacks(IPhysicsBasedScroll2DActions instance)
        {
            if (m_Wrapper.m_PhysicsBasedScroll2DActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PhysicsBasedScroll2DActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PhysicsBasedScroll2DActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PhysicsBasedScroll2DActionsCallbackInterface.OnMovement;
                @Jump.started -= m_Wrapper.m_PhysicsBasedScroll2DActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PhysicsBasedScroll2DActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PhysicsBasedScroll2DActionsCallbackInterface.OnJump;
                @Run.started -= m_Wrapper.m_PhysicsBasedScroll2DActionsCallbackInterface.OnRun;
                @Run.performed -= m_Wrapper.m_PhysicsBasedScroll2DActionsCallbackInterface.OnRun;
                @Run.canceled -= m_Wrapper.m_PhysicsBasedScroll2DActionsCallbackInterface.OnRun;
            }
            m_Wrapper.m_PhysicsBasedScroll2DActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Run.started += instance.OnRun;
                @Run.performed += instance.OnRun;
                @Run.canceled += instance.OnRun;
            }
        }
    }
    public PhysicsBasedScroll2DActions @PhysicsBasedScroll2D => new PhysicsBasedScroll2DActions(this);
    private int m_MovementControlSchemeSchemeIndex = -1;
    public InputControlScheme MovementControlSchemeScheme
    {
        get
        {
            if (m_MovementControlSchemeSchemeIndex == -1) m_MovementControlSchemeSchemeIndex = asset.FindControlSchemeIndex("MovementControlScheme");
            return asset.controlSchemes[m_MovementControlSchemeSchemeIndex];
        }
    }
    public interface IPhysicsBasedScroll2DActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
    }
}
